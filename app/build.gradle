import org.apache.tools.ant.taskdefs.condition.Os

import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def keystorePSW = ''
def keystoreAlias = ''
def keystoreAliasPSW = ''
// default keystore file, PLZ config file path in local.properties
def keyfile = file('s.keystore.temp')
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def keystoreFilepath = properties.getProperty("keystore.path")
if (keystoreFilepath) {
    keystorePSW = properties.getProperty("keystore.password")
    keystoreAlias = properties.getProperty("keystore.alias")
    keystoreAliasPSW = properties.getProperty("keystore.alias_password")
    keyfile = file(keystoreFilepath)
}

def getCurrentFlavor() {
    String task = getGradle().getStartParameter().getTaskRequests().toString()
    Matcher matcher = Pattern.compile("(assemble|generate)\\w*(Release|Debug)").matcher(task)
    if (matcher.find()) return matcher.group(2).toLowerCase() else {
        println "Warning: No match found for $task"
        return "debug"
    }
}

android {
    buildToolsVersion rootProject.buildToolsVersion
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.github.ccg.clasha"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.sdkVersion
        versionCode 17
        versionName "0.0.3.6"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        externalNativeBuild {
            ndkBuild {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                arguments "-j${Runtime.runtime.availableProcessors()}"
            }
        }
    }
    signingConfigs {
        ccg {
            //keystore中key的别名
            keyAlias keystoreAlias
            //keystore中key的密码
            keyPassword keystorePSW
            //keystore的文件路径，可以是绝对路径也可以是相对路径
            storeFile keyfile
            //keystore的密码
            storePassword keystoreAliasPSW

            v1SigningEnabled true
            v2SigningEnabled false

        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.ccg
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.ccg
        }
    }

    flavorDimensions "default"
    productFlavors {
        night {
            buildConfigField("boolean", "closeBeta", "false")
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    androidExtensions {
        experimental = true
    }

    dataBinding {
        enabled = true
    }

    lintOptions.checkReleaseBuilds false
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }
    sourceSets.main.jniLibs.srcDirs +=
            new File(project(':app').buildDir, "intermediates/bundles/${getCurrentFlavor()}/jni")
    sourceSets.main.jniLibs.srcDirs += new File(project(':app').projectDir, "src/main/clash/bin")

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'libs', include: ['*.aar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"


    kapt "androidx.room:room-compiler:$roomVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation "junit:junit:$junitVersion"

    implementation 'com.squareup.okhttp3:okhttp:3.12.1'

    implementation 'eu.chainfire:libsuperuser:1.0.0.201704021214'
    implementation 'com.android.support.constraint:constraint-layout:2.0.0-beta3'
    androidTestImplementation "androidx.test:runner:$androidTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidEspressoVersion"


    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.1.0-alpha03'
    implementation 'com.google.android.material:material:1.2.0-alpha01'

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha03"
    implementation "androidx.appcompat:appcompat:$androidxVersion"
    implementation 'androidx.recyclerview:recyclerview:1.1.0-rc01'
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    implementation 'androidx.browser:browser:1.2.0-alpha08'
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta3'

    implementation 'androidx.preference:preference:1.1.0'
    implementation "com.takisoft.preferencex:preferencex:1.1.0-alpha05"
    implementation "com.takisoft.preferencex:preferencex-simplemenu:1.0.0-alpha2"


    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.25', classifier: 'android'

    implementation 'me.rosuh:AndroidFilePicker:0.4.2'

    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.45-androidx"

    // DEBUG START
    debugImplementation 'com.github.whataa:pandora:v1.3.2'
    releaseImplementation 'com.github.whataa:pandora-no-op:v1.3.2'
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.4'
    implementation 'com.blankj:utilcodex:1.25.9'
    implementation 'com.google.code.gson:gson:2.8.6'

    testImplementation group: 'org.json', name: 'json', version: '20170516'
    // DEBUG END
    //check updateandroidx.fragment:fragment:1.0.0
    implementation 'androidx.fragment:fragment:1.2.0-rc02'

    implementation 'com.yanzhenjie.andserver:api:2.0.5'
    kapt 'com.yanzhenjie.andserver:processor:2.0.5'


    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }

}

task goBuild(type: Exec) {

    executable "sh"
    args "-c", "src/main/clash/make.bash " + minSdkVersion
}

task goClean(type: Exec) {
    executable "sh"
    args "-c", "src/main/clash/clean.bash"
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'generateJsonModelDebug' ||
            task.name == 'generateJsonModelRelease')) {
        task.dependsOn(goBuild)
    }
}
//if (getCurrentFlavor() == 'release')
ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
//        def offset = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
//        if (offset != null) output.versionCodeOverride = variant.versionCode + offset
        //def fileName = "ClashA-${offset}.apk"
//        println "文件名：-----------------${output.outputFileName}"
//        println "versionCodeOverride：-----------------${output.versionCodeOverride}"
//        println "123：-----------------${output}"
//        println "12223：-----------------${output.versionCodeOverride}"
        def customAbi = ""
        if (output.getFilter(com.android.build.OutputFile.ABI) == null) {
            customAbi = "universal"
        } else {
            customAbi = output.getFilter(com.android.build.OutputFile.ABI)
        }
        //output.outputFileName = fileName
        def fileName = "ClashA-${customAbi}-${getCurrentFlavor()}-${output.apkData.versionName}.apk"
        output.outputFileName = fileName
    }
}

def getVersionCodePrefix() {
    def date = new Date()
    def versionCode = date.format('yyyyMMddHHmm')
    return versionCode
}

